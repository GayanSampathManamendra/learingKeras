import numpy as np
import keras
from keras import backend as k
from keras.models import Sequential
from keras.layers import Activation
from keras.optimizers import Adam
from keras.metrics import categorical_crossentropy
from keras.preprocessing.image import ImageDataGenerator
from keras.layers.normalization import BatchNormalization
from keras.layers.convolutional import *
from matplotlib import pyplot as plt
from keras.layers import  Dense
from PIL import  Image
from keras.layers import Flatten
from sklearn.metrics import confusion_matrix
import itertools
import matplotlib.pyplot as plt

#from scipy import misc



train_path = 'C:/Users/USER PC/Desktop/keras/images/train'
valid_path = 'C:/Users/USER PC/Desktop/keras/images/validate'
test_path = 'C:/Users/USER PC/Desktop/keras/images/test'

train_batches = ImageDataGenerator().flow_from_directory(train_path, target_size=(224, 224), classes=['cat', 'dag'],
                                                         batch_size=10)
validate_batches = ImageDataGenerator().flow_from_directory(valid_path, target_size=(224, 224), classes=['cat', 'dag'],
                                                            batch_size=2)
test_batches = ImageDataGenerator().flow_from_directory(test_path, target_size=(224, 224), classes=['cat', 'dog'],
                                                        batch_size=2)

#build and train the CNN model

model=Sequential(
    [
        Conv2D(32,(3,3),activation='relu',input_shape=(224,224,3)),
        Flatten(),
        Dense(2,activation='softmax'),
        
    ]
)

#model.compile(Adam(lr=0.0001),loss="categorical_crossentropy",metrics=['accuracy'])

#model.fit_generator(train_batches,steps_per_epoch=5,validation_data=validate_batches,validation_steps=4,epochs=5,verbose=2)


#predictions=model.predict_generator(test_batches,steps=2,verbose=0)
#print(predictions)

# VGG16 model

vgg16_model=keras.applications.vgg16.VGG16()
vgg16_model.summary()


type(vgg16_model)

model=Sequential()
for layer in vgg16_model.layers:
    model.add(layer)

model.summary()

#remove the last dence layer

model.layers.pop()
model.summary()

# remove alrady trained data

for layer in model.layers:
    layer.trainable=False

# add new dence layer for the model which i want

model.add(Dense(2,activation='softmax'))
model.summary()

# training data using vgg model

model.compile(Adam(lr=0.0001),loss='categorical_crossentropy',metrics=['accuracy'])
model.fit_generator(train_batches,steps_per_epoch=5,validation_data=validate_batches,validation_steps=4,epochs=5,verbose=2)

#predicting result

predictions=model.predict_generator(test_batches,steps=2,verbose=0)
print(predictions)
